on:
  workflow_dispatch:
    inputs:
      check_config:
        type: boolean
        description: 'Fail when configuration overridden'
        required: true
        default: true
      sql_backup:
        type: boolean
        description: 'Create SQL backup'
        required: true
        default: true

name: Deploy to production
jobs:
  build:
    name: "Create release archive"
    runs-on: ubuntu-latest
    outputs:
      filename: ${{ steps.release.outputs.filename }}
      base: ${{ steps.release.outputs.base }}
      sha: ${{ steps.release.outputs.sha }}
    steps:
      - name: "Build artifact"
        id: release
        uses: cristiroma/drupal-release-action@v1.3
        with:
          dev: false
          artifact: true

  deploy:
    name: "Deploy release"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.filename }}

      - name: "Configure SSH"
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/server.key
          chmod 600 ~/.ssh/server.key
          cat >>~/.ssh/config <<END
          Host server
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/server.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.TEST_SSH_USER }}
          SSH_KEY: ${{ secrets.TEST_SSH_KEY }}
          SSH_HOST: ${{ secrets.TEST_SSH_HOST }}

      - name: "Test for Drupal configuration changes"
        if:  ${{ github.event.inputs.check_config == 'true' }}
        run: ssh server 'cd ${{ secrets.TEST_PROJECT_DIR }}/live && CONFIG_STATUS=$(./vendor/bin/drush config:status -n 2>&1) && echo ${CONFIG_STATUS} | grep -i -q -s "No differences"'

      - name: "Doing SQL backup"
        if:  ${{ github.event.inputs.sql_backup == 'true' }}
        run: ssh server 'cd ${{ secrets.TEST_PROJECT_DIR }}/live && ./vendor/bin/drush sql:dump --structure-tables-list=cache,cache_*,watchdog,sessions,history --result-file=${{ secrets.TEST_PROJECT_DIR }}/database-before-${{ needs.build.outputs.base }}.sql --gzip'

      - name: "Copy release to the server"
        run: |
          ssh server 'rm -rf ${{ secrets.TEST_PROJECT_DIR }}/${{ needs.build.outputs.base }} && mkdir -p ${{ secrets.TEST_PROJECT_DIR }}/${{ needs.build.outputs.base }}'
          scp ${{ needs.build.outputs.filename }} server:${{ secrets.TEST_PROJECT_DIR }}/${{ needs.build.outputs.base }}/
          ssh server 'cd ${{ secrets.TEST_PROJECT_DIR }}/${{ needs.build.outputs.base }} && tar zxf ${{ needs.build.outputs.filename }} && rm ${{ needs.build.outputs.filename }}'
          ssh server 'cd ${{ secrets.TEST_PROJECT_DIR }} && ln -s ${{ secrets.TEST_PROJECT_DIR }}/settings.local.php ./${{ needs.build.outputs.base }}/web/sites/default/settings.local.php'
          ssh server 'cd ${{ secrets.TEST_PROJECT_DIR }} && ln -s ${{ secrets.TEST_PROJECT_DIR }}/files ./${{ needs.build.outputs.base }}/web/sites/default/files'
          ssh server 'cd ${{ secrets.TEST_PROJECT_DIR }} && rm -f live && ln -s ${{ needs.build.outputs.base }} live'

      - name: "Update instance"
        run: |
          ssh server 'cd ${{ secrets.TEST_PROJECT_DIR }}/live && ./vendor/bin/drush state-set system.maintenance_mode TRUE'
          ssh server 'cd ${{ secrets.TEST_PROJECT_DIR }}/live && ./vendor/bin/drush cache:rebuild'
          ssh server 'cd ${{ secrets.TEST_PROJECT_DIR }}/live && ./vendor/bin/drush config-import -y'
          ssh server 'cd ${{ secrets.TEST_PROJECT_DIR }}/live && ./vendor/bin/drush updatedb -y'
          ssh server 'cd ${{ secrets.TEST_PROJECT_DIR }}/live && ./vendor/bin/drush cache:rebuild'
          ssh server 'cd ${{ secrets.TEST_PROJECT_DIR }}/live && ./vendor/bin/drush state-set system.maintenance_mode FALSE'

      - name: "Clean releases older than 90 days"
        run:  ssh server 'cd ${{ secrets.TEST_PROJECT_DIR }} && find release-* -maxdepth 1 -type d -mtime +90 -prune -exec rm -rf {} \;'
